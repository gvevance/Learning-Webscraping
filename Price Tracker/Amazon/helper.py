# helper functions

from bs4 import BeautifulSoup

from classes import *

def getCredentials(credfile):

    with open(credfile) as cfile :
        username = cfile.readline().strip()
        password = cfile.readline().strip()

    return username , password


def login_amazon(session,email,password) :
    ''' login into Amazon. No return object.
        session is an HTML session.
        email and password are the corresponding strings of email/phone number and password.'''

    main_url = "https://www.amazon.in/ap/signin"

    session.headers['user-agent'] = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36'
    res = session.get(main_url)
    cookies = dict(res.cookies)

    payload = {
        'appActionToken': 'j5h9SCJQSGUvVocGUl5pNXtL00gj3D' ,
        'appAction': 'SIGNIN_PWD_COLLECT' ,
        'subPageType': 'SignInClaimCollect' ,
        'openid.return_to': 'ape:aHR0cHM6Ly93d3cuYW1hem9uLmluL2dwL3lvdXJzdG9yZS9ob21lP3BhdGg9JTJGZ3AlMkZ5b3Vyc3RvcmUlMkZob21lJnNpZ25Jbj0xJnVzZVJlZGlyZWN0T25TdWNjZXNzPTEmYWN0aW9uPXNpZ24tb3V0JnJlZl89bmF2X0FjY291bnRGbHlvdXRfc2lnbm91dA==' ,
        'prevRID': 'ape:SjdDOUI2NTk1RE1FRTlQOTBTUFI=' ,
        'workflowState': 'eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.z3_n5DAdsj4vYBI8uXgUNyVYAT3tX-1isQYN4m1sGbTydMrT6SIUpw.w8UhOfBTQ3Ka6sGk.dUD1sITM3R2yGVLtA4UR6FGUtL5obVQK6hseonsVJwktxumw9bhYZ2n_k9KRsQJFFc96uPG1V_IFNmRLQ5EURu8XzYpJnkRuCys18C4YYFRuWAyegCMsMW9z-wtBcKPNq2aslunvVH0UYFRVbQ6_7TwT9vm5c_w5uMTEmULMHigMXC_qyFGsFmvDPRIG58-42b_ELgYbY5kpCLM9j-2w8Q-_os87TJ8K-Uli_H8fsX4d3wGQpegUrIDpachFgJEw9e4kmZ62Erv1076fNO_JFUS6770.mPwZUyMlURTkEXR7Hu4QpA' ,
        'email': email ,
        'password': password ,
        'create': '0' ,
        'metadata1':'ECdITeCs:'
    }

    # login into account
    session.post(main_url,data=payload,cookies=cookies)    # not storing return value


def get_search_results(session,query) :
    ''' This function returns results of a search query as a list of soup results. 
        session is an HTML session.
        query is the text to search for. '''

    search_url = f"https://www.amazon.in/s?k={query}&i=aps&ref=nb_sb_ss_ts-doa-p_2_2&crid=OYVDLPMKGY95&sprefix=Ki,aps,28"

    res = session.get(search_url,allow_redirects=True).text
    soup = BeautifulSoup(res,'lxml')
    results = soup.find_all("a",class_="a-link-normal s-underline-text s-underline-link-text s-link-style a-text-normal")
    links = ["http://www.amazon.in"+result['href'] for result in results]

    obj_list = []
    for link in links :
        obj_list.append(search_result(link))

    return obj_list
